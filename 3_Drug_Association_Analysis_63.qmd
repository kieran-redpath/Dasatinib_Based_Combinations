---
title: "Drug Association Analysis"
author: "Kieran Redpath"
format: html
editor: source
theme: cosmo
---

## Summary
+ Reloads processed data from 0_Setup.qmd, 1_Differential_Expression_Analysis.qmd, and 2_Gene_Set_Enrichment_Analysis.qmd.
+ Carries out matrix multiplication to transform gene expression data for all cell lines based on the expression values in the 38 gastric and breast cancer cell lines with the top and bottom tertile values for dasatinib response.

### Load packages
```{r}
#| results: hide
#| warning: false
#| message: false
#| echo: false

library(limma)
library(edgeR)
library(data.table)
library(magrittr)
library(ggplot2)
library(CePa)
library(tidyverse)
library(dplyr)
library(org.Hs.eg.db)
library(reactome.db)
library(goseq)
library(gplots)
source('data/heatmap-mik.R')
library(knitr)
library(evaluate)
library(kableExtra)
library(devtools)
library(viridis)
set.seed(42)
```

### Load pre-processed data
```{r}
# GDSC2 response data for all cell lines.
GDSC2 <- readRDS("data/GDSC2.rds") # Not sure if we need this.

# GDSC2 dasatinib response data for cell lines used in differential expression analysis.
sort_dasatinib_GDSC2 <- readRDS("data/sort_dasatinib_GDSC2.rds")

# CCLE normalized gene expression data for all cell lines.
voom_CCLE <- readRDS("data/voom_CCLE.rds")

# CCLE normalized gene expression data for cell lines used in differential expression analysis.
sort_voom_CCLE <- readRDS("data/sort_voom_CCLE.rds")

# Tool for converting gene names without calling AnnotationDbi::select() every time.
gene_tool <- readRDS("data/gene_tool.rds")

# Tool to select breast and gastric cancer cell lines for metagene construction.
TOI_tissue_tool <- readRDS("data/TOI_tissue_tool.rds")

# Top table from differential expression analysis.
top_table <- readRDS("1_output/top_table.rds")

# enriched Reactome pathways from gene set enrichment analysis.
enriched_pathways <- readRDS("2_output/enriched_pathways.rds") # not sure if we need this.

# enriched parent Reactome pathways from gene set enrichment analysis.
parent_enriched_pathways <- readRDS("2_output/parent_enriched_pathways.rds")
```

### Extract list of enriched genes in each pathway, converting to Ensembl IDs to match CCLE data.
```{r}
# Extract entrez IDs in each enriched pathway as a list of named vectors.
leading_edge_entrez <- lapply(seq_len(nrow(parent_enriched_pathways)), function(i) {
  parent_enriched_pathways$leadingEdge[[i]]
})
# Create a named vector to convert entrez to ensembl IDs more efficiently.
entrez_to_ensembl <- setNames(as.character(gene_tool$ENSEMBL), as.character(gene_tool$ENTREZ))
# Map ENTREZ to ENSEMBL and remove names from each result.
leading_edge_ensembl <- lapply(leading_edge_entrez, function(entrez_ids) {
  ensembl_ids <- entrez_to_ensembl[as.character(entrez_ids)]
  unname(ensembl_ids)
})
# Assign pathway names.
names(leading_edge_ensembl) <- parent_enriched_pathways$pathway

# Tidy up the environment.
rm(list = c("entrez_to_ensembl", "leading_edge_entrez"))
```

### OPTIONAL: Carry out matrix multiplication
```{r}
# Extract gene expression data for TOI cell lines.
TOI_voom_CCLE <- voom_CCLE %>%
  as.data.frame() %>%
  dplyr::select(any_of(TOI_tissue_tool$Cell_Line))

# Create empty data matrix for metagenes in cell lines of interest.
pathway_matrix_x <- matrix(data = 0, nrow(parent_enriched_pathways), nrow(TOI_tissue_tool))
rownames(pathway_matrix_x) <- parent_enriched_pathways$pathway
colnames(pathway_matrix_x) <- TOI_tissue_tool$Cell_Line

# Create empty data matrix for metagenes in all cell lines.
pathway_matrix_y <- matrix(data = 0, nrow(parent_enriched_pathways), ncol(voom_CCLE))
rownames(pathway_matrix_y) <- parent_enriched_pathways$pathway
colnames(pathway_matrix_y) <- colnames((voom_CCLE))

# Create metagenes for pathways with more than four genes, in cell lines of interest and all cell lines.
for(pathway in names(leading_edge_ensembl)){
  if(length(leading_edge_ensembl[[pathway]]) > 4){
    
    # Filter gene expression data for pathway genes in cell lines of interest.
    pathway_TOI_voom_CCLE <- subset(TOI_voom_CCLE, rownames(TOI_voom_CCLE) %in% leading_edge_ensembl[[pathway]])
    # Scale and transpose the matrix to re-orient it.
    pathway_TOI_voom_CCLE <- apply(pathway_TOI_voom_CCLE, 1, scale, scale = TRUE) %>% t()
    # Reassign column names.
    colnames(pathway_TOI_voom_CCLE) <- colnames((TOI_voom_CCLE))
    
    # Filter gene expression data for pathway genes in all cell lines.
    pathway_voom_CCLE <- subset(voom_CCLE, rownames(voom_CCLE) %in% leading_edge_ensembl[[pathway]])
    # Scale and transpose the matrix to re-orient it.
    pathway_voom_CCLE <- apply(pathway_voom_CCLE, 1, scale, scale = TRUE) %>% t()
    # Reassign column names.
    colnames(pathway_voom_CCLE) <- colnames((voom_CCLE))
    
    # Create the svd using the cell lines of interest.
    svd_x <- svd(pathway_TOI_voom_CCLE)
    
    # # Extract metagenes for cell lines of interest.
    metagene_x <- svd_x$v[ ,1]
    # Add the metagenes to the matrix of pathways vs metagenes in cell lines of interest.
    pathway_matrix_x[pathway, ] <- metagene_x
    
    # Create the transformation matrix, using the svd from the cell lines of interest.
    trans_matrix <- diag(1/svd_x$d) %*% t(svd_x$u)
    # Create metagenes across all cell lines, using the transformation matrix.
    metagene_y <- (t(pathway_voom_CCLE) %*% t(trans_matrix))[ ,1]
    # Add the metagenes to the matrix of pathways vs metagenes in all cell lines.
    pathway_matrix_y[pathway, ] <- metagene_y
  }
}

# Tidy up the environment.
rm(list = c("pathway" , "svd_x", "metagene_x", "trans_matrix", "metagene_y",
            "pathway_voom_CCLE", "pathway_TOI_voom_CCLE"))
```

### Isolate drug response data for each cell line.
```{r}
# Create empty data matrix for drug response in all cell lines that have GDSC2 data.
drug_response <- matrix(0, length(unique(GDSC2$DRUG_NAME)), length(unique(GDSC2$CELL_LINE_NAME)))
rownames(drug_response) <- unique(GDSC2$DRUG_NAME)
colnames(drug_response) <- unique(GDSC2$CELL_LINE_NAME)

# Extract tidy formatted drug response (AUC) data from the GDSC2.
for(drug in rownames(drug_response)){
  for(cell_line in colnames(drug_response)){
    y <- GDSC2$AUC[GDSC2$DRUG_NAME == drug & GDSC2$CELL_LINE_NAME == cell_line]
    if(length(y) == 0){
      drug_response[drug, cell_line] <- 0 # If there is no data for the combination of drug and cell_line, assign NA.
    } else{
      if(length(y) > 1){
        message("Multiple matches for: ", drug, " - ", cell_line) # Warn if there are multiple matches between a drug and cell_line combination.
      }
      drug_response[drug, cell_line] <- y[1] # In case there are multiple values for a drug and cell_line combination, take the first match.
    }
  }
}

# Tidy up the environment.
rm(list = c("cell_line", "drug", "y"))
```

### Calculate correlations between metagene value and drug response
```{r}
# Subset drug response data to only cell lines that have both gene expression and any drug response data.
subset_drug_response <- drug_response %>%
  as.data.frame() %>%
  dplyr::select(any_of(colnames(pathway_matrix_y))) %>%
  as.matrix()
# Subset pathway metagene data to only cell lines that have both gene expression and any drug response data, simultaneously re-ordering columns to match drug response data.
subset_pathway_matrix_y <- pathway_matrix_y %>%
  as.data.frame() %>%
  dplyr::select(any_of(colnames(subset_drug_response))) %>%
  as.matrix()

drug_metagene_correlation <- cor(t(subset_pathway_matrix_y), t(subset_drug_response),
                                 method = "spearman") %>% na.omit() # Remove pathways that don't have correlations - in this case, those with genes < 4.

# Save the correlations in csv format.
write.csv(drug_metagene_correlation, file = "3_output/drug_metagene_correlation.csv", sep = ",",
          row.names = T, col.names = T)
# Do we need to set sep or col.names?
# Tidy up the environment.
rm(list = c("subset_drug_response", "subset_pathway_matrix_y"))
```

### Calculate correlations between metagene value and drug response
```{r}
# How many drug/pathway interactions satisfy a given Spearman correlation coefficient threshold?
for(i in seq(0.1, 1.0, by = 0.1)){
  sum(abs(drug_metagene_correlation) > i) %>% print()
}

# Determine the correlation threshold.
cor_thresh <- 0.4

# Which drugs correlate to each pathway?
# Add the number of correlated drugs as a column.
correlated_pathways <- rowSums(abs(drug_metagene_correlation) > cor_thresh) %>% .[. > 0] %>% sort(., decreasing = T)  %>% as.data.frame()
colnames(correlated_pathways) <- "Drug Count"
# Add pathway names as a column.
correlated_pathways <- correlated_pathways %>%
  rownames_to_column(var = "Pathway")
# Add names of correlated drugs as a column.
correlated_pathways$Drug <- sapply(
  correlated_pathways$Pathway,
  function(pathway) {
    drugs <- names(which(abs(drug_metagene_correlation[pathway, ]) > cor_thresh))
    paste(drugs, collapse = ", ")
  }
)
correlated_pathways

# Which pathways correlate to each drug?
# Add the number of correlated pathways as a column.
correlated_drugs <- colSums(abs(drug_metagene_correlation) > cor_thresh) %>% .[. > 0] %>% sort(., decreasing = T) %>% as.data.frame()
colnames(correlated_drugs) <- "Pathway Count"
# Add drug names as a column.
correlated_drugs <- correlated_drugs %>%
  rownames_to_column(var = "Drug")
# Add names of correlated pathways as a column.
correlated_drugs$Pathway <- sapply(
  correlated_drugs$Drug,
  function(drug) {
    pathways <- names(which(abs(drug_metagene_correlation[, drug]) > cor_thresh))
    paste(pathways, collapse = ", ")
  }
)
correlated_drugs

# Create a matrix where all correlations < cor_thresh (moderate) are replaced with NAs, for visualization. 
moderate_drug_metagene_correlation <- drug_metagene_correlation
moderate_drug_metagene_correlation[abs(moderate_drug_metagene_correlation) < cor_thresh] <- NA

# Tidy up the environment
rm(list = c("pathways", "drugs", "cor_thresh"))
```

### Output a summary document
```{r}
# Create summary object
summary <- list()
summary$sort_dasatinib_GDSC2 <- sort_dasatinib_GDSC2
summary$top_table <- top_table %>% rownames_to_column(var = "Ensembl ID")
summary$parent_enriched_pathways <- parent_enriched_pathways
summary$drug_metagene_correlation <- drug_metagene_correlation %>% as.data.frame() %>% rownames_to_column(var = "Pathway")
summary$correlated_drugs <- correlated_drugs
summary$correlated_pathways <- correlated_pathways

# Create workbook
library(openxlsx)
wb <- createWorkbook()
for (name in names(summary)) {
  addWorksheet(wb, name)
  writeData(wb, sheet = name, summary[[name]])
}

# Save the workbook
saveWorkbook(wb, file = "3_output/summary.xlsx", overwrite = TRUE)

# Tidy up the environment
rm(list = c("correlated_drugs", "correlated_pathways", "i", "wb", "name"))
```

### Tidy up the environment and R memory
```{r}
# rm(list = ls())
# gc()
```